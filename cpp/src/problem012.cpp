/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
/********************* Header Files ***********************/
/* C++ Headers */
#include <iostream> /* Input/output objects. */
#include <iomanip>
#include <vector>

#include "boost/assign/list_of.hpp"
#include "gtest/gtest.h"
#include "util.hpp"

/**************** Namespace Declarations ******************/
using std::cout;
using std::endl;

/****************** Class Definitions *********************/
class TriangleGenerator {
public:
    TriangleGenerator() : num(1), add(2) {};

    long next() {
        num += add;
        add++;
        return num;
    }

    long index() { return add - 1; }
    long number() { return num; }
private:
    long num;
    long add;
};

/************** Global Vars & Functions *******************/
TEST(Euler012, FirstTenTriangles) {
    std::vector<long> expect = boost::assign::list_of(1) (3) (6) (10) (15)
            (21) (28) (36) (45) (55);
    TriangleGenerator tg;

    for (std::vector<long>::const_iterator i = expect.begin(); i != expect.end(); ++i) {
        ASSERT_EQ(*i, tg.number());
        tg.next();
    }
}

TEST(Euler012, FinalAnswer) {
    const long num_divisors = 500;
    TriangleGenerator tg;
    std::vector<long> divs = util::find_divisors(tg.number());
    while (divs.size() <= num_divisors) {
        divs = util::find_divisors(tg.next());
    }

    cout << "The triangle number " << tg.number() << " has " << divs.size() << " divisors." << endl;
    cout << "The divisors are:" << endl;

    long last = *divs.rbegin();
    long width = 0;
    while (last != 0) {
        width += 1;
        last /= 10;
    }

    int per_line = 80 / width, cnt = 0;
    for (std::vector<long>::const_iterator itr = divs.begin(); itr != divs.end(); ++itr) {
        cout << std::setw(width) << *itr << " ";
        if (cnt++ > per_line) {
            cnt = 0;
            cout << endl;
        }
    }
    cout << endl;

    ASSERT_EQ(76576500, tg.number());
}

